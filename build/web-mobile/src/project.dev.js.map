{"version":3,"sources":["assets/scripts/Game.js","assets/scripts/Player.js","assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","this","groundY","y","height","timer","starDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","update","dt","gameOver","enabled","gainScore","string","audioEngine","playEffect","stopAllActions","director","loadScene","jumpDuration","maxMoveSpeed","accel","jumpAudio","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","jumpAction","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","abs","x","pickRadius","getPlayerDistance","playerPos","getPosition","dist","position","sub","mag","onPicked","destroy","opacityRatio","minOpacity","opacity","floor"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 这个属性引用了星星预制资源\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // 星星产生后消失时间的随机范围\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // 地面节点，用于确定星星生成的高度\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // score label 的引用\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        // 得分音效资源\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        }\r\n    },\r\n\r\n    onLoad: function () {\r\n        // 获取地平面的 y 轴坐标\r\n        this.groundY = this.ground.y + this.ground.height/2;\r\n        // 初始化计时器\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n        // 初始化计分\r\n        this.score = 0;\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // 使用给定的模板在场景中生成一个新节点\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // 将新增的节点添加到 Canvas 节点下面\r\n        this.node.addChild(newStar);\r\n        // 为星星设置一个随机位置\r\n        newStar.setPosition(this.getNewStarPosition());\r\n        // 在星星组件上暂存 Game 对象的引用\r\n        newStar.getComponent('Star').game = this;\r\n        // 重置计时器，根据消失时间范围随机取一个值\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\r\n        var maxX = this.node.width/2;\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // 返回星星坐标\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n    update: function (dt) {\r\n        // 每帧更新计时器，超过限度还没有生成新的星星\r\n        // 就会调用游戏失败逻辑\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            this.enabled = false;   // disable gameOver logic to avoid load scene repeatedly\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // 更新 scoreDisplay Label 的文字\r\n        this.scoreDisplay.string = 'Score: ' + this.score;\r\n        // 播放得分音效\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n    gameOver: function () {\r\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\r\n        cc.director.loadScene('game');\r\n    }\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    \r\n    properties: {\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n        // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    setJumpAction: function () {\r\n        // 跳跃上升\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // 下落\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    onKeyDown (event) {\r\n        // set a flag when key pressed\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp (event) {\r\n        // unset a flag when key released\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onLoad: function() {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);    \r\n    },\r\n\r\n    onDestroy () {\r\n        // 取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },    \r\n\r\n    update: function (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n});\r\n\r\n\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    \r\n    properties: {\r\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n        pickRadius: 0,\r\n    },\r\n\r\n    getPlayerDistance: function () {\r\n        // 根据 player 节点位置判断距离\r\n        var playerPos = this.game.player.getPosition();\r\n        // 根据两点位置计算两点之间距离\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n        this.game.spawnNewStar();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore();\r\n        // 然后销毁当前星星节点\r\n        this.node.destroy();\r\n    },\r\n\r\n    update: function (dt) {\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        \r\n        // 根据 Game 脚本中的计时器更新星星的透明度\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n});\r\n"],"sourceRoot":"/source/","file":"project.dev.js"}